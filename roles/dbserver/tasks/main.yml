--- # dbserver
- name: Install postgres packages
  apt: pkg={{ item }} state=latest
  sudo: yes
  with_items:
    - postgresql
    - postgresql-client
    - postgresql-contrib
    - libpq-dev
    - python-pycurl
    - python-psycopg2
    
- name: update locales
  shell: "update-locale LANG=en_AU.UTF-8 LC_ALL=en_AU.UTF-8 LC_CTYPE=en_AU.UTF-8"
  sudo: yes
    
- name: reconfigure locales
  shell: "dpkg-reconfigure locales"
  sudo: yes

  # ubuntu user needs permissions to sudo as postgres user without password
- name: check if dbs are created already
  shell: "sudo -p postgres psql {{ db }} {{ db_user }} -c 'select 1'"
  register: db_setup
  ignore_errors: yes

- name: remove existing postgrs cluster
  # if the dbs haven't been created yet, we want to destroy the whole db
  # cluster and recreate it with proper utf8 support. From http://ph.ly/pg
  shell: "sudo -p postgre pg_dropcluster --stop 9.1 main"
  when: db_setup.rc != 0 # only do this if the dbs haven't been created yet
  ignore_errors: yes

- name: setup postgres cluster to default to utf8
  # if the dbs haven't been created yet, we want to destroy the whole db
  # cluster and recreate it with proper utf8 support. From http://ph.ly/pg
  shell: "sudo -p postgres pg_createcluster --start 9.1 main"
  when: db_setup.rc != 0 # only do this if the dbs haven't been created yet

- name: create db user
  sudo: yes
  sudo_user: postgres
  postgresql_user: name={{ db_user }} password={{ db_pass }} role_attr_flags=SUPERUSER
  when: db_setup.rc != 0 # only do this if the dbs haven't been created yet

- name: create dbs
  postgresql_db: name={{ db }} owner={{ db_user }} encoding='UTF-8' lc_collate='en_US.UTF-8' lc_ctype='en_US.UTF-8' template='template0' state=present
  sudo: yes
  sudo_user: postgres
  when: db_setup.rc != 0 # only do this if the dbs haven't been created yet

- name: make config dir
  file: path={{ shared_path }}/config state=directory

- name: Generate the database.yml configuration file.
  template: src=postgresql.yml dest={{ shared_path }}/config/database.yml 

- name: Generate the .pgpass file
  template: src=pgpass dest={{ home_path }}/.pgpass mode=600

#- name: Generate the crontab file for automated backups.
  #template: src=crontab dest={{ home_path }}/crontab

#- name: Generate the crontab file for automated backups.
  #template: src=crontab dest={{ home_path }}/crontab

