--- # Deploy

#----------------
# Build codebase

- name: Remove the old build path
  file: dest={{ build_path }} state=absent

- name: Update repo
  git: repo="{{ git_repo }}" dest="{{ repo_path }}" version="{{ version }}" force=yes bare=yes
  tags: clone

- name: Copy repo to build
  git: repo={{ repo_path }} dest={{ build_path }} version="{{ version }}" force=yes 
  tags: clone_local


- name: Symlink into the repo
  file: src={{ item.src }} dest={{ item.dest }} state=link force=yes owner={{ user }}
  with_items:
    - { src: "{{ assets_path }}", dest: "{{ build_path }}/public/assets" }
    - { src: "{{ system_path }}", dest: "{{ build_path }}/public/system" }
    - { src: "{{ spree_path }}", dest: "{{ build_path }}/public/spree" }
    - { src: "{{ config_path }}/post-receive", dest: "{{ build_path }}/.git/hooks/post-receive" }
    - { src: "{{ config_path }}/database.yml", dest: "{{ build_path }}/config/database.yml" }
    - { src: "{{ config_path }}/seeds.rb", dest: "{{ build_path }}/db/seeds.rb" }
    - { src: "{{ config_path }}/states.yml", dest: "{{ build_path }}/db/default/spree/states.yml" }
    - { src: "{{ config_path }}/countries.yml", dest: "{{ build_path }}/db/default/spree/countries.yml" }
  tags: symlink

- name: Symlink optional files into the repo
  file: src={{ item.src }} dest={{ item.dest }} state=link force=yes owner={{ user }}
  with_items:
    - { src: "{{ config_path }}/suburb_seeds.rb", dest: "{{ build_path }}/db/suburb_seeds.rb" }
    - { src: "{{ config_path }}/bugsnag.rb", dest: "{{ build_path }}/config/bugsnag.rb" }
    - { src: "{{ config_path }}/newrelic.yml", dest: "{{ build_path }}/config/newrelic.yml" }
    - { src: "{{ config_path }}/s3.yml", dest: "{{ build_path }}/config/s3.yml" }
  tags: symlink
  ignore_errors: yes

- name: Install app dependencies
  #TODO make the "--without development" part conditonal on rails_env
  # Note: the 'LANG=...' is a fix fro broken rubygems utf8 handling.
  command: bash -lc "LANG={{ language }} LC_ALL={{ language }} LC_COLLATE={{ language }} {{ bundle_path }} install --gemfile {{ build_path }}/Gemfile --path /home/{{ user }}/.gem --deployment" #--without development test"
  environment:
    LANG: "{{ language }}"
    LC_ALL: "{{ language }}"
    LC_COLLATE: "{{ language }}"
  tags: bundle_app
  notify:
    - restart unicorn
    - restart nginx

#--------------------
# Get timestamp

- name: Get current date for timestamp
  shell: date +"%Y-%m-%d-%I%M%S"
  register: current_date


#--------------------------
# Create a rollback release

- name: Remove the old rollback
  file: dest={{ rollback_path }} state=absent
- name: Remove the old rollback database
  file: dest={{ rollback_sql_path }} state=absent

  # Uses sudo inline (instead of ansible format) as postgres user can't save files. @TODO need to set this up for ofn_user.
- name: Create a database rollback version
  shell: sudo -u postgres pg_dump {{ db }} | gzip > {{ rollback_sql_path }}
- name: Create a database backup version
  command: cp {{ rollback_sql_path }} {{ releases_path }}/{{ current_date.stdout }}.sql.gz

- name: Create a repo rollback version
  command: mv {{ current_path }} {{ rollback_path }} removes={{ current_path }}
- name: Create a repo backup version
  command: cp -r {{ rollback_path }} {{ releases_path }}/{{ current_date.stdout }} removes={{ rollback_path }}


#-------------------------
# Move new code into place

- name: Move build to current
  command: mv {{ build_path }} {{ current_path }} removes={{ build_path }}

#--------------------
# Update the database

- name: Check database status
  command: psql -U postgres -d {{ db }} -c "SELECT true FROM pg_tables WHERE tablename = 'order_cycles';"
  sudo: yes
  sudo_user: postgres
  register: table_exists
  ignore_errors: yes
  tags: rake

- name: Create database if it doesnt exist
  command: bash -lc "{{ bundle_path }} exec rake db:create RAILS_ENV={{ rails_env }}" chdir="{{ current_path }}"
  when: table_exists.stderr.find('does not exist') != -1
  tags: rake

- name: Load Schema if it isnt loaded # TODO fix this so it actually works if the database exists but the table doesn't.
  command: bash -lc "{{ bundle_path }} exec rake db:schema:load RAILS_ENV={{ rails_env }}" chdir="{{ current_path }}"
  # TODO check that both database and table do not exist so this still runs if the database is already there but empty.
  when: table_exists.stderr.find('does not exist') != -1
  tags: rake

- name: Migrate database
  command: bash -lc "{{ bundle_path }} exec rake db:migrate RAILS_ENV={{ rails_env }}" chdir="{{ current_path }}"
  tags: rake

- name: Seed database
  # We run a shell script that passes the default email and password to rake with an EOF block, so we don't hang on the prompts.
  command: bash -lc "{{ config_path }}/seed.sh RAILS_ENV={{ rails_env }}" chdir="{{ current_path }}"
  tags: rake
  notify:
    - restart unicorn
    - restart nginx

# Fix to get around database errors when this is done before schema:load. TODO fix this elsewhere.
- name: Symlink spree initializer into the repo
  file: src={{ item.src }} dest={{ item.dest }} state=link force=yes
  with_items:
    - { src: "{{ config_path }}/spree.rb", dest: "{{ current_path }}/config/initializers/spree.rb" }
  tags:
    - spree
    - rake

#------------------
# Precompile assets

# TODO make precompile conditional to speed things up.
- name: Precompile primary assets
  command: bash -lc "{{ bundle_path }} exec rake assets:precompile:primary RAILS_GROUPS=assets RAILS_ENV={{ rails_env }}" chdir="{{ current_path }}"
  tags:
    - precompile
    - rake
  notify:
    - restart unicorn
    - restart nginx

- name: Precompile nondigest assets
  command: bash -lc "{{ bundle_path }} exec rake assets:precompile:nondigest RAILS_GROUPS=assets RAILS_ENV={{ rails_env }}" chdir="{{ current_path }}"
  tags:
    - precompile
    - rake
  notify:
    - restart unicorn
    - restart nginx


#------------------
# Backup rollback version

- name: Creat a repo rollback version
  command: cp {{ current_path }} {{ rollback_path }}/{{ current_date.stdout }}
  ignore_errors: yes

